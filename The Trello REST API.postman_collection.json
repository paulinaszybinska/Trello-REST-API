{
	"info": {
		"_postman_id": "263ee544-e070-466d-bba3-a6ed11b2f997",
		"name": "The Trello REST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26579627"
	},
	"item": [
		{
			"name": "Boards",
			"item": [
				{
					"name": "Create a board",
					"item": [
						{
							"name": "Create a board with a valid name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST request\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if board name is a correct value\", () => {\r",
											"    const regName = /[a-zA-Z0-9!@#\\$%\\^\\&*\\)\\(+=._-]/;\r",
											"    pm.expect(resData.name).to.match(regName);\r",
											"});\r",
											"\r",
											"pm.test(\"Check the length of the board name\", () => {\r",
											"    const minLength = 0;\r",
											"    const maxLength = 16385;\r",
											"    const inputData = pm.expect(resData.name.length);\r",
											"\r",
											"    inputData.to.be.greaterThan(minLength)\r",
											"    &&\r",
											"    inputData.to.be.lessThan(maxLength);\r",
											"});\r",
											"\r",
											"pm.test(\"Set boardID to enviroment variable\", () => {\r",
											"    pm.environment.set(\"boardID\", resData.id);\r",
											"});\r",
											"\r",
											"pm.test(\"Set organizationID to enviroment variable\", () => {\r",
											"    const resData = pm.response.json();\r",
											"    const organizationId = resData.idOrganization;\r",
											"    pm.environment.set(\"organizationId\", organizationId);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/1/boards/?name=Valid name&key={{apiKey}}&token={{apiToken}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "Valid name"
										},
										{
											"key": "key",
											"value": "{{apiKey}}"
										},
										{
											"key": "token",
											"value": "{{apiToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a board with no name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful POST request\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify if board has not name value\", () => {\r",
											"    const url = pm.request.url.toString();\r",
											"    const decodedUrl = decodeURIComponent(url);\r",
											"    const nameParam = decodedUrl.match(/name=([^&]+)/);\r",
											"\r",
											"    pm.expect(nameParam).to.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/1/boards/?name=&key={{apiKey}}&token={{apiToken}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": ""
										},
										{
											"key": "key",
											"value": "{{apiKey}}"
										},
										{
											"key": "token",
											"value": "{{apiToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a board with a name that consists of only a space or spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful POST request\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if name value is a space or spaces\", () => {\r",
											"    const url = pm.request.url.toString();\r",
											"    const decodedUrl = decodeURIComponent(url);\r",
											"    const nameParam = decodedUrl.match(/name=([^&]+)/)[1];\r",
											"\r",
											"    pm.expect(nameParam.trim()).to.eql(\"\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/1/boards/?name= &key={{apiKey}}&token={{apiToken}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": " "
										},
										{
											"key": "key",
											"value": "{{apiKey}}"
										},
										{
											"key": "token",
											"value": "{{apiToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a board with a name that consists of special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful POST request\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check special characters in board name\", () => {\r",
											"    const specialChars = /[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\r",
											"    pm.expect(resData.name).to.match(specialChars);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{baseURL}}/1/boards/?name=*Name ! $&key={{apiKey}}&token={{apiToken}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"1",
										"boards",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "*Name ! $"
										},
										{
											"key": "key",
											"value": "{{apiKey}}"
										},
										{
											"key": "token",
											"value": "{{apiToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get a board",
					"item": [
						{
							"name": "Get a board",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful GET request\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if one board has been retrieved\", () => {\r",
											"    const boardId = pm.environment.get(\"boardID\")\r",
											"    pm.expect(resData.id).to.eql(boardId);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/1/boards/{{boardID}}?key={{apiKey}}&token={{apiToken}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"1",
										"boards",
										"{{boardID}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{apiKey}}"
										},
										{
											"key": "token",
											"value": "{{apiToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all boards",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful GET request\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Set boardIDs to enviroment variable\", () => {\r",
											"    const boardIds = [];\r",
											"    resData.forEach(board => boardIds.push(board.id));\r",
											"    pm.environment.set(\"boardIDs\", boardIds);\r",
											"});\r",
											"\r",
											"pm.test(\"Get all boards in the workspace\", () => {\r",
											"    const boardIds = pm.environment.get(\"boardIDs\");\r",
											"    pm.expect(resData.length).to.eql(boardIds.length);\r",
											"    resData.forEach(board => pm.expect(boardIds).to.include(board.id));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/1/organizations/{{organizationId}}/boards?key={{apiKey}}&token={{apiToken}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"1",
										"organizations",
										"{{organizationId}}",
										"boards"
									],
									"query": [
										{
											"key": "key",
											"value": "{{apiKey}}"
										},
										{
											"key": "token",
											"value": "{{apiToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update a board",
					"item": [
						{
							"name": "Update the name of the board to the correct new name value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();",
											"",
											"pm.test(\"Successful PUT request\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Check if the board name has been updated\", function () {",
											"    pm.expect(resData.name).to.eql(\"New board name\");",
											"});",
											"",
											"pm.test(\"Check if board new name is a correct value\", () => {",
											"    const regName = /[a-zA-Z0-9!@#\\$%\\^\\&*\\)\\(+=._-]/;",
											"    pm.expect(resData.name).to.match(regName);",
											"});",
											"",
											"pm.test(\"Check if board new name has correct length\", () => {",
											"    const minLength = 0;",
											"    const maxLength = 16385;",
											"    const inputData = pm.expect(resData.name.length);",
											"",
											"    inputData.to.be.greaterThan(minLength)",
											"    &&",
											"    inputData.to.be.lessThan(maxLength);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"New board name\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/1/boards/{{boardID}}?key={{apiKey}}&token={{apiToken}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"1",
										"boards",
										"{{boardID}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{apiKey}}"
										},
										{
											"key": "token",
											"value": "{{apiToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the board name to consist of only one space or multiple spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"pm.test(\"Unsuccessful PUT request\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if updated name value is a space or spaces\", () => {\r",
											"    pm.expect(resData.message).to.eql(\"invalid value for name\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"   \"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/1/boards/{{boardID}}?key={{apiKey}}&token={{apiToken}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"1",
										"boards",
										"{{boardID}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{apiKey}}"
										},
										{
											"key": "token",
											"value": "{{apiToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the name of the board to include no name value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"pm.test(\"Unsuccessful PUT request\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if updated board name has no value\", () => {\r",
											"    pm.expect(resData.message).to.eql(\"invalid value for name\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/1/boards/{{boardID}}?key={{apiKey}}&token={{apiToken}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"1",
										"boards",
										"{{boardID}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{apiKey}}"
										},
										{
											"key": "token",
											"value": "{{apiToken}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the name of the board to include special characters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful PUT request\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if updated name consists of special characters\", () => {\r",
											"    pm.expect(resData.name).to.eql(\"100% once again\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"100% once again\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/1/boards/{{boardID}}?key={{apiKey}}&token={{apiToken}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"1",
										"boards",
										"{{boardID}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{apiKey}}"
										},
										{
											"key": "token",
											"value": "{{apiToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete a board",
					"item": [
						{
							"name": "Delete a board",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const resData = pm.response.json();\r",
											"\r",
											"pm.test(\"Successful DELETE request\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check if the board has been deleted\", () => {\r",
											"    pm.expect(resData._value).to.be.null;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/1/boards/{{boardID}}?key={{apiKey}}&token={{apiToken}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"1",
										"boards",
										"{{boardID}}"
									],
									"query": [
										{
											"key": "key",
											"value": "{{apiKey}}"
										},
										{
											"key": "token",
											"value": "{{apiToken}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "APIKey",
			"value": "bda623af961bbafc0487190290cc898b"
		}
	]
}